#클린 아키텍처가 중요한 이유

훌륭한 소프트웨어 아키텍처가 시스템, 프로젝트, 팀에 놀라운 효과를 가져오는 것을 확인했다. 나는 천국을 가 보았다

설계와 아키텍처는 같은 것이다. 개별로는 존재할 수 없고, 실제로 이 둘을 구분 짓기는 어렵다. 고수준에서 저수준으로 향하는 의사결정의 연속성이다

좋은 소프트웨어 설계의 목표는 필요한 시스템을 만들고 유지보수하는 데 투입되는 인력을 최소화하는 데 있다.

빨리 가는 유일한 방법은 제대로 가는 것이다.

어떤 경우라도 개발 조직이 할 수 있는 최고의 선택지는 조직에 스며든 과신을 인지하여 방지하고, 소프트눼어 아키텍처의 품질을 심각하게고민하기 시작하는 것이다. 그럴려면 좋은 아키텍처가 무엇인지 이해해야 한다.

프로그래머를 고용하는 이유는 이해관계자를 위해 기계가 수익을 창출하거나 비용을 절약하도록 만들기 위해서다

소프트웨어=부드러운+제품,상품. 소프트웨어는 ‘부드러움을 지니도록’ 만들어졌다. 소프트웨어를 만든 이유는 기계의 행위를 쉽게 변경할 수 있도록 하기 위해서다.

아키텍처가 후순위가 되면 시스템을 개발하는 비용이 더 많이 들고, 일부 또는 전체 시스템에 변경을 가하는 일이 현실적으로 불가능해진다.

#패러다임

세가지의 패러다임은 모두 아키텍처와 관계가 있다. 우리는 아키텍처 경계를 넘나들기 위한 메커니즘으로 다형성을 이용한다. 함수형 프로그래밍을 이요와여 데이터의 위치와 접근 방법에 대해 규칙을 부과한다. 모듈의 기반 알고리즘으로 구조적 프로그래밍을 사용한다.

아키텍처의 세 가지 큰 관심사=함수, 컴포넌트 관리, 데이터 관리

데이크스트라는 “테스트는 버그가 있음을 보여줄 뿐, 버그가 없음을 보여줄 수는 없다”고 얘기했다. 다시말해 프로그램이 잘못되었음을 테스트를 통해 증명할 수는 있지만, 프로그램이 맞다고 증명할 수는 없다.
